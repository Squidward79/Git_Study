<<GIT 의 기본>>

1. 버전관리,이력 관리 저장소

2. 원격저장소(Remote Repository) 와 로컬저장소
    - 로컬에 내려받는걸 Pull, 원격에 올리는걸 Push

 3. 저장소 만들기
    - 새 저장소를 만들거나, 이미 존재하는 원격저장소를 로컬로 복사.

 4. 커밋(Commit)
    - 커밋을 하면 변경사항이 저장소에 기록된다.
    - 커밋에는 영문/숫자로 이루어진 40자리 고유 이름이 붙는다. 
    - 커밋은 이력을 남기는 작업으로, 반드시 메시지를 남겨야 한다.
        @ Git에서 권장하는 메시지 형식
            1번째 줄 : 커밋 내의 변경내용을 요약
            2번째 줄 : 빈칸
            3번째 줄 : 변경한 이유
            
       @훌륭한 Git 커밋 메시지의 일곱 가지 규칙
        기억해두자. 이 내용은 이미 이전에 다 했던 이야기다.
            1.제목과 본문을 빈 행으로 분리한다
            2.제목 행을 50자로 제한한다
            3.제목 행 첫 글자는 대문자로 쓴다
            4.제목 행 끝에 마침표를 넣지 않는다
            5.제목 행에 명령문을 사용한다
            6.본문을 72자 단위로 개행한다
            7.어떻게 보다는 무엇과 왜를 설명한다

5. 작업트리(Work Tree)와 인덱스(Index)
    - 흔히 말하는 폴더를 작업트리라고 부른다.
    - 커밋을 실행하기 전 저장소와 작업트리 사이의 공간을 인덱스라고 부른다.
    - 커밋을 하려면 작업트리의 변경 내용을 인덱스에 기록(Staging 이라고도 함)
    - 커밋할 파일을 선별할 수 있는 공간이기도 하다.

//////////////////////////////////////// 튜토리얼

6. 새 저장소 만들기 
    -(git bash) 해당폴더에서 $ git init 명령어를 사용하면 저장소로 등록

7. 파일 커밋하기
    1) Git의 관리하에 있는 폴더의 작업트리와 인덱스 상태를 확인하려면
        $ git status  명령어를 사용한다. 
    2) 이력 추적 대상이 되지 않은 파일은 untracked files 라고 표시된다.
        처음 한번만 인덱스에 등록하면 추적 대상으로 등록할 수 있다.
    3) 파일을 인덱스에 등록하려면 add를 쓴다
        $ git add <file>.. 
        @ 파일 뒤에 한칸 띄어쓰기로 여러 파일 한번에 지정 가능
        @ 파라미터에 . 를 지정하면 모든 파일을 인덱스에 등록 가능 

    4) 커밋하려면 commit 를 쓴다
        $ git commit -m "<Message>"
    5) 변경사항이 커밋된다. 
        @ 변경 이력은 $ git log 로 확인 가능하다.
    
////////////////////////////////////////

<< 저장소 공유 >>

1. 원격 저장소에 Push하기
    - push : 로컬의 변경 이력을 원격 저장소에 업로드하는 것

2. 원격 저장소 Clone 하기
    - 원격 저장소의 내용을 통째로 다운로드 하는 것 
    - 변경 이력도 함께 로컬로 복제된다.

3. 원격 저장소에서 Pull 해오기
    - 원격 저장소에서 로컬 저장소로 업데이트 하는 것
    - 최신 변경 이력을 다운로드하여 로컬에 적용한다.

//////////////////////////////////////// 튜토리얼

4. 원격 저장소 생성 
    - git hub 같은 곳에 저장소를 만든다.

5. 원격 저장소에 Push 하기
    - 원격 저장소의 주소는 이름으로 기록할 수 있다.
    - 원격 저장소를 추가하려면 remote add 명령어를 사용 
        $ git remote add <name> <url>
            @ name 은 등록명, url 은 원격저장소의 주소
    
    - push하려면 push 명령어를 사용 . 마지막 커밋이 원격에 올라간다.
        $ git push <repository> <refspec> ...
            @ repository 는 push의 경로 주소, refspec은 push할 브랜치 지정

6. 원격 저장소 Clone 하기
    - 원격 저장소를 복제하여 다른 곳에서도 작업할 수 있게 만든다.
    - 복제하려면 clone 명령어를 사용
        $ git clone <repository> <directory>
            @ repository 는 원격저장소 주소, directory 는 복제 대상의 폴더명을 지정 


////////////////////////////////////////

<< 변경 이력의 통합 >>
1. 변경 이력 Merge 하기 
    - 저장소가 최신 버전이 아닌 경우, push 요청이 거부될 수 있다.
    - 이 때 Merge를 하여 다른 사람의 업데이트 이력을 로컬에 갱신 한 후 push해야 한다.
    - 보통은 git 에서 변경 부분을 자동으로 통합해주는데, 원격과 로컬에서 동일 부분을 수정한 경우,
      어느쪽의 변경사항에 맞춰야 하는 지 모르기 때문에 충돌이 발생한다.
    
2. 충돌 해결하기 
    - 충돌난 부분은 

    <<<<<<<
     [ 로컬 내용 ]
    =======
     [ 원격 저장소 내용 ]
    >>>>>>>

    이런 식으로 표기해준다.
    충돌 부분을 수정해준 후 다시 commit 해주면 된다.

    @ push 할 때 리젝이 난다면 충돌이 난 것. 
      원인은 최신버전이 아니기 때문. 해결방법은 
        1. 먼저 git pull 을 해주고, 충돌난다면
        2. 해당 부분을 수정해준다.
        3. 그 후 다시 git commit -m "내용" 
        4. 제대로 커밋이 됐다면 git push, 안됐다면 1번으로 돌아갈 것

## 요약
 1. init 으로 git 저장소 설정
 2. add 로 변경사항을 스테이징 (인덱스에 추가)
 3. status 로 변경사항의 스테이징을 확인 후 
 4. commit 하면 변경사항이 기록됨.  (*실제 파일은 원격에 안올라가고 로컬에만 저장)
 5. commit 된 것을 push 하면 원격 저장소에 파일이 업로드
 
 6. 원격 저장소의 최신 내용을 로컬로 '덮어쓰기' 하려면 
    git fetch --all
    git reset --hard origin/master(덮어쓰기의 기준이 되는 브랜치) 
